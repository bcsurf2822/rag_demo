üîß RAG AI Agent Task Prompt

You are working on a Retrieval-Augmented Generation (RAG) AI Agent. The foundational components of the project are complete ‚Äî including document ingestion, chunking, vector embedding, Supabase pgvector setup, and Pydantic AI-based agent responses via Streamlit.

The next phase is focused on drastically improving the agent‚Äôs performance, particularly:
	‚Ä¢	Response accuracy
	‚Ä¢	Token usage visibility
	‚Ä¢	User-facing response formatting
	‚Ä¢	Expanded file type support (especially DOCX)

üß† Your Tasks:
	1.	Improve Retrieval Accuracy and Context Use
	‚Ä¢	Implement semantic re-ranking of results before generating responses.
	‚Ä¢	Experiment with multi-query expansion to improve relevant chunk recall.
	‚Ä¢	Reduce hallucinations and off-topic answers by applying stricter context filtering logic.
	‚Ä¢	Add metadata filtering and sorting for document selection during retrieval.
	2.	Enhance DOCX Ingestion
	‚Ä¢	Refine DOCX handling to support complex layouts (e.g., tables, headers, styled sections).
	‚Ä¢	Validate that DOCX chunks are properly embedded and stored with metadata.
	3.	Implement Observability and Debug Tools
	‚Ä¢	Visualize:
	‚Ä¢	Total tokens used (query + context + response).
	‚Ä¢	Time taken for vector search and LLM response.
	‚Ä¢	Context relevance/match scores.
	‚Ä¢	Display source chunks and highlight matched sections in responses.
	‚Ä¢	Log and graph latency over time for debugging.
	4.	Response Quality Enhancements
	‚Ä¢	Add markdown formatting (e.g., headers, bullet points, bold highlights).
	‚Ä¢	Append document sources and citations inline with responses.
	‚Ä¢	Add a feedback widget (thumbs up/down) to rate response quality.
	5.	Future-Ready Features (Design or Prototype)
	‚Ä¢	Chunk versioning and re-ingestion tracking.
	‚Ä¢	Expose the RAG process as an API endpoint.
	‚Ä¢	Admin UI for monitoring ingestion, queries, feedback.

‚∏ª

üõ†Ô∏è Use These Guidelines When Performing Tasks:
	‚Ä¢	Use the Supabase MCP server to create the necessary database tables with the pgvector extension enabled.
	‚Ä¢	For document processing, use PyPDF2 for PDFs rather than complex libraries ‚Äî keep it simple and maintainable.
	‚Ä¢	Use the Crawl4AI RAG MCP server, which already has:
	‚Ä¢	Pydantic AI docs
	‚Ä¢	Supabase Python SDK docs
	‚Ä¢	This is your primary source for in-app RAG queries.
	‚Ä¢	Use the Brave MCP server to search the open web for supplemental documentation, examples, and clarification when building or debugging.
	‚Ä¢	After reading the TASK.md file and planning documents, immediately perform documentation retrieval using the Crawl4AI and Brave MCP servers.